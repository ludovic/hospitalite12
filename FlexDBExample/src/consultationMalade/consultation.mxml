<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" xmlns:consultation="consultationMalade.*" creationComplete="canvas1_creationCompleteHandler(event)" >
	<mx:Script>
		<![CDATA[
			import common.events.DocEvent;
			import common.helper.DataGridDataExporter;
			import common.helper.ProgressPopUp;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import phi.db.Database;
			import phi.db.Query;
			import phi.interfaces.IDatabase;
			import phi.interfaces.IQuery;
			
			private var db       :IDatabase;
			private var query    :IQuery;
			private var query2    :IQuery;
			private var query3    :IQuery;
			private var query4    :IQuery;
			private var query5    :IQuery;
			private var query6    :IQuery;
			private var query7    :IQuery;
			private var query8    :IQuery;
			private var query9    :IQuery;
			private var query10   :IQuery;
			private var query11   :IQuery;
			private var query12   :IQuery;
			private var query13   :IQuery;
			private var query14   :IQuery;
			private var query15   :IQuery;
			
			private var personneData:Object;
			
			protected function canvas1_creationCompleteHandler(event:Object):void
			{
				db = Database.getInstance();
				query = new Query();
				query.connect("conn1", db);
				query.addEventListener(Query.QUERY_END, provideNameGrid);
				query.addEventListener(Query.QUERY_ERROR,queryError);
				//p.id_personne, Titre, Nom, Prenom, Adresse1, CodePostal, Commune, s.section, ch.libelle, ch.etage, ch.ascenseur, ch.lits
				//deficit_fugue,
				query.execute("SELECT actif, Adresse1, annuler,ascenseur, autre_soin_oxygene, autre_soin_oxygene_debit, autre_soin_prise_med, autre_soin_spec, CodePostal, codification," +
					" Commune, coucher_aide, coucher_barriere_lit, coucher_potence, Courriel, DateNaissance, deficit_audition, deficit_desorientation," +
					"deficit_parole, deficit_vision,	deplace_aide, deplace_brancard,	deplace_canne, deplace_deambulateur, " +
					"deplace_escalier, deplace_fauteuil, deplace_seul, divers,	etage, " +
					"etre_hospitalier, extracteur, hebergement,	id_gare, m.id_malade,	id_module, id_pele,	p.id_personne, id_personne_etre_resposable, "+
					"id_profession_sante, s.id_secteur, incomplet, incont_bes_change,	incont_etui_pen, incont_jour, incont_nuit, incont_poche_stom, incont_poche_stom_type, incont_sond_uri, "+
					" lastUpdate, libelle, liea, lits, matelas_anti_esc, montantInsc, monte_marches_car, Nom, num,	ch.numero, ordre, paiementInsc, pers_prev_fam,	"+
				" pers_prev_hosp, pers_prev_nom, pers_prev_pers_conf, pers_prev_tel, pers_prev_tut, poids, Portable, pos_voy_assis,	pos_voy_assis_ft, pos_voy_couche, Prenom, protheses, reg_chambre, "+	
				" reg_diab, reg_eau_gef, reg_mix, reg_normal, reg_pb_deglutition, reg_ss_sel, section, sexe, soin_inf_inj, soin_inf_inj_horraire, soin_inf_inj_type, soin_inf_insuline, soin_inf_pansement, soin_inf_pansement_type, "+
				 "souleve_malade,	taille,	Tel, Titre, toilette_aide_lit, toilette_aide_partiel_avec, toilette_aide_partiel_sans, toilette_aide_total, valid, "+
				 "medecin_traitant, tel_medecin, tel_retour, pos_voy_electrique, coussin_esc, reg_hache, parenterale, ppc, dialyse, lit_medicalise, verticalisateur, reg_aide_repas "+
			 "FROM etre_malade em, personne p, malade m, chambre ch, secteur s WHERE em.id_personne = p.id_personne " +
					" AND em.id_malade = m.id_malade AND ch.numero = m.numero AND s.id_secteur = p.id_secteur AND m.annuler='non' AND em.id_pele="+index.peleActuel.id_pele);
			}
			
			private function provideNameGrid(evt:Object):void
			{
				listeNom.listeNomProvider = query.getRecords();
				listeNom.addEventListener(ListeNom.PERSONNE_SELECTED,setPersonneFields);
				listeNom.addEventListener(ListeNom.REFRESH,canvas1_creationCompleteHandler);
			}

			private function queryError(evt:Event):void
			{
				Alert.show((evt.target as Query).getError());
			}
			
			//////////////////////////////////////////////consultation////////////////////////////////////////////////////////////////
			private function setPersonneFields(event:DocEvent):void
			{
				personneData = new Object();
				personneData.info = event.body;
				query2 = new Query();
				query2.connect("conn1", db);
				query2.addEventListener(Query.QUERY_END, getTransportHebergement);
				query2.addEventListener(Query.QUERY_ERROR,queryError);
				query2.execute("SELECT  t.nom_transport, g.nom, pp.heure_aller  FROM inscrire i, transport t, gare g, passer_par pp " +
					" WHERE i.id_personne ="+personneData.info.id_personne +
					" AND i.id_transport = t.id_transport"+ 
					" AND i.id_gare = g.id_gare"+ 
					" AND pp.id_gare = i.id_gare"+
					" AND pp.id_transport = i.id_transport"+
					" AND pp.id_pele = i.id_pele"+
					" AND i.id_pele="+index.peleActuel.id_pele +
					" GROUP BY i.id_personne");
			}
			
			private function getTransportHebergement(event:Object):void
			{
				if(query2.getRecords().length>0)
					personneData.transHeb = query2.getRecords()[0];
				else
					personneData.transHeb = null;
				
				query3 = new Query();
				query3.connect("conn1", db);
				query3.addEventListener(Query.QUERY_END, getTransportRetour);
				query3.addEventListener(Query.QUERY_ERROR,queryError);
				query3.execute("SELECT t.nom_transport, g.nom, pp.heure_retour  FROM inscrire i, transport t, gare g, passer_par pp " +
					" WHERE i.id_personne ="+personneData.info.id_personne +
					" AND i.id_transport_retour = t.id_transport"+ 
					" AND i.id_gare_retour = g.id_gare"+ 
					" AND pp.id_gare = i.id_gare_retour"+
					" AND pp.id_transport = i.id_transport_retour"+
					" AND pp.id_pele = i.id_pele"+
					" AND i.id_pele="+index.peleActuel.id_pele +
					" GROUP BY i.id_personne");
				
			}
			
			private function getTransportRetour(event:Object):void
			{
				if(query3.getRecords().length>0)
					personneData.transRetour = query3.getRecords()[0];
				else
					personneData.transRetour = null;
				
				query10 = new Query();
				query10.connect("conn1", db);
				query10.addEventListener(Query.QUERY_END, getSoldes);
				query10.addEventListener(Query.QUERY_ERROR,queryError);
				query10.execute("SELECT p.Total, p.TotalPaye,p.solde  FROM inscrire i, prix p" +
					" WHERE i.id_personne ="+personneData.info.id_personne +
					" AND i.id_pele="+index.peleActuel.id_pele +
					" AND i.id_prix = p.id_prix");
			}
			
			private function getSoldes(event:Object):void
			{
				if(query10.getRecords().length>0)
					personneData.soldes = query10.getRecords()[0];
				
				detailsPersonne.data = personneData;
			}
			
			private var exportData:ArrayCollection;
			private var popUpWindow:IFlexDisplayObject
		
			
			private function alertClickHandler(event:CloseEvent):void
			{
				switch (event.detail){
					case Alert.OK:
						var csvText:String = DataGridDataExporter.exportCSVFromArrayCollection(exportData);
						var fileSave:FileReference= new FileReference();
						fileSave.save(csvText,"export_all.csv");
						break;
				}
				
			}
			
			
			
			
			/////////////////////////////////////////////// export///////////////////////////////////////////////////////////////
			protected function exportAll2(event:MouseEvent):void
			{
				getTransportHebergementList(null);
			}
			
			private var transportHebergementList:ArrayCollection;
			private function getTransportHebergementList(event:DocEvent):void
			{
				query6 = new Query();
				query6.connect("conn1", db);
				query6.addEventListener(Query.QUERY_END, getTransportRetourList);
				query6.addEventListener(Query.QUERY_ERROR,queryError);
				query6.execute("SELECT t.nom_transport, g.nom, pp.heure_aller, i.id_personne  FROM inscrire i, transport t, gare g, passer_par pp " +
					" WHERE  i.id_transport = t.id_transport"+ 
					" AND i.id_gare = g.id_gare"+ 
					" AND pp.id_gare = i.id_gare"+
					" AND pp.id_transport = i.id_transport"+
					" AND pp.id_pele = i.id_pele"+
					" AND i.id_pele="+index.peleActuel.id_pele +
					" GROUP BY i.id_personne");
			}
			private var transportRetourList:ArrayCollection;
			private function getTransportRetourList(event:Object):void
			{
				if(query6.getRecords().length>0)
					transportHebergementList= query6.getRecords();
				
				query7 = new Query();
				query7.connect("conn1", db);
				query7.addEventListener(Query.QUERY_END, getPaiementList);
				query7.addEventListener(Query.QUERY_ERROR,queryError);
				query7.execute("SELECT i.id_personne, t.nom_transport, g.nom, pp.heure_retour  FROM inscrire i, transport t, gare g, passer_par pp " +
					" WHERE  i.id_transport_retour = t.id_transport"+ 
					" AND i.id_gare_retour = g.id_gare"+ 
					" AND pp.id_gare = i.id_gare_retour"+
					" AND pp.id_transport = i.id_transport_retour"+
					" AND pp.id_pele = i.id_pele"+
					" AND i.id_pele="+index.peleActuel.id_pele +
					" GROUP BY i.id_personne");
				
			}
			
			private var paiementList:ArrayCollection;
			private function getPaiementList(event:Object):void
			{
				if(query7.getRecords().length>0)
					transportRetourList= query7.getRecords();
				
				query11 = new Query();
				query11.connect("conn1", db);
				query11.addEventListener(Query.QUERY_END, buildExport);
				query11.addEventListener(Query.QUERY_ERROR,queryError);
				query11.execute("SELECT i.id_personne, p.Total, p.TotalPaye,p.solde  FROM inscrire i, prix p" +
					" WHERE i.id_pele="+index.peleActuel.id_pele +
					" AND i.id_prix = p.id_prix");
				
			}
			
			private function buildExport(event:Object):void
			{
				paiementList= query11.getRecords();
				
				exportData = new ArrayCollection();
				popUpWindow = PopUpManager.createPopUp(this,ProgressPopUp,false);
				
				PopUpManager.centerPopUp(popUpWindow);
				
				for(var i:int=0;i<listeNom.listeNomProvider.length;++i)
				{
					ProgressPopUp(popUpWindow).setprogress(i,listeNom.listeNomProvider.length);
					var myObject:Object = new Object
					var info:Object = listeNom.listeNomProvider[i];
					
					myObject.titre = info.Titre;
					myObject.nom = info.Nom;
					myObject.prenom = info.Prenom;
					myObject.adresse = info.Adresse1;
					myObject.codepostal = info.CodePostal;
					myObject.ville = info.Commune;
					myObject.section = info.section;
					myObject.chambre = info.libelle;
					myObject.etage = info.etage;
					myObject.ascenseur = info.ascenseur;
					myObject.lits = info.lits;
					
					myObject.transportA = myObject.nomGareA = myObject.heureAller = "";
					for(var j:int=0;j<transportHebergementList.length;++j)
					{
						if(transportHebergementList[j].id_personne == info.id_personne)
						{
							myObject.transportA = transportHebergementList[j].nom_transport;
							myObject.nomGareA =  transportHebergementList[j].nom;
							myObject.heureAller = transportHebergementList[j].heure_aller;
						}
					}
					
					myObject.transportR = myObject.nomGareR = myObject.heureRetour = "";
					for(var k:int=0;k<transportRetourList.length;++k)
					{
						if(transportRetourList[k].id_personne == info.id_personne)
						{
							myObject.transportR = transportRetourList[k].nom_transport;
							myObject.nomGareR =  transportRetourList[k].nom;
							myObject.heureRetour = transportRetourList[k].heure_retour;
						}
					}
					
					
					myObject.Total = myObject.TotalP = myObject.Solde  = "";
					for(var n:int=0;n<paiementList.length;++n)
					{
						if(paiementList[n].id_personne == info.id_personne)
						{
							myObject.Total = paiementList[n].Total;
							myObject.TotalP = paiementList[n].TotalPaye;
							myObject.Solde =  paiementList[n].solde;
						}
					}
					
					exportData.addItem(myObject);
				}
				
				PopUpManager.removePopUp(popUpWindow);
				Alert.show("Confirmation de l'export.","",Alert.OK,this, alertClickHandler);
			}
			
			protected function genererLettres(event:MouseEvent):void
			{
				var url:String = " http://logiciel.bouges.fr/pdf/lettre_malades.php?pele=" +index.peleActuel.id_pele;
				var urlRequest:URLRequest = new URLRequest(url);
				navigateToURL(urlRequest,"_blank");
			}
			
		]]>
	</mx:Script>
	<consultation:ListeNom id="listeNom" width="200"/>
	<mx:VBox width="100%" height="100%">
		<mx:HBox>
			<mx:Button label="Exporter tout" right="0" click="exportAll2(event)" visible="true" includeInLayout="true"/>
			<mx:Button label="Générer lettres" right="0" click="genererLettres(event)" visible="true" includeInLayout="true"/>
		</mx:HBox>
		<consultation:Details id="detailsPersonne" width="100%" height="100%">
		</consultation:Details>
	</mx:VBox>
	
	
</mx:HBox>
